package org.sigmah.shared.dto.profile;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

import org.sigmah.client.dispatch.remote.Authentication;
import org.sigmah.shared.domain.profile.GlobalPermissionEnum;
import org.sigmah.shared.domain.profile.PrivacyGroupPermissionEnum;

/**
 * Utility class to manipulate profiles.
 * 
 * @author tmi
 * 
 */
public final class ProfileUtils {

    /**
     * Provides only static methods.
     */
    private ProfileUtils() {
    }

    private static final String START_TAG = "-PDTOS;BEGIN-[";
    private static final String END_TAG = "]-PDTOS;END-";
    private static final String FIELD_SEPARATOR = "\\|";
    private static final String GLOBAL_PERMISSION_SEPARATOR = "#";
    private static final String PRIVACY_GROUP_SEPARATOR = "#";
    private static final String PRIVACY_GROUP_FIELD_SEPARATOR = "\\*";

    /**
     * Gets a custom string representation of a profile which can be
     * deserialized by the {@link #readProfile(String)} method.
     * 
     * @param profile
     *            The profile.
     * @return The profile string representation.
     */
    public static String writeProfile(ProfileDTO profile) {

        final StringBuilder sb = new StringBuilder();

        sb.append(START_TAG);

        if (profile != null) {

            // Name
            sb.append(profile.getName());
            sb.append(FIELD_SEPARATOR);

            // Global permissions
            boolean first = true;
            if (profile.getGlobalPermissions() != null) {
                for (final GlobalPermissionEnum global : profile.getGlobalPermissions()) {
                    if (global != null) {

                        if (!first) {
                            sb.append(GLOBAL_PERMISSION_SEPARATOR);
                        }

                        sb.append(global.name());

                        first = false;
                    }
                }
            }

            sb.append(FIELD_SEPARATOR);

            // Privacy groups
            first = true;
            if (profile.getPrivacyGroups() != null) {
                for (final Map.Entry<PrivacyGroupDTO, PrivacyGroupPermissionEnum> entry : profile.getPrivacyGroups()
                        .entrySet()) {

                    final PrivacyGroupDTO group = entry.getKey();
                    final PrivacyGroupPermissionEnum permission = entry.getValue();

                    if (group != null && permission != null) {

                        if (!first) {
                            sb.append(PRIVACY_GROUP_SEPARATOR);
                        }

                        // The id is needed to be used as key in a hashed
                        // collection.
                        sb.append(group.getId());
                        sb.append(PRIVACY_GROUP_FIELD_SEPARATOR);
                        sb.append(group.getCode());
                        sb.append(PRIVACY_GROUP_FIELD_SEPARATOR);
                        sb.append(group.getTitle());
                        sb.append(PRIVACY_GROUP_FIELD_SEPARATOR);
                        sb.append(permission.name());

                        first = false;
                    }
                }
            }
        }

        sb.append(END_TAG);

        return sb.toString();
    }

    /**
     * Deserializes a custom string representation of a profile which has been
     * generated by the {@link #writeProfile(ProfileDTO)} method.
     * 
     * @param string
     *            The profile string representation.
     * @return The profile.
     */
    public static ProfileDTO readProfile(String string) {

        final ProfileDTO profile = new ProfileDTO();

        if (string != null) {

            final int startIndex = string.indexOf(START_TAG);
            final int endIndex = string.indexOf(END_TAG);

            // The string is a valid string.
            if (startIndex != -1 && endIndex != -1) {

                // Extracts the profile string.
                final String profileAsString = string.substring(startIndex + START_TAG.length(), endIndex);

                // Splits the main fieldS.
                final String[] fields = profileAsString.split(FIELD_SEPARATOR);
                if (fields.length >= 3) {

                    // Name.
                    profile.setName(fields[0]);

                    // Global permissions.
                    profile.setGlobalPermissions(new HashSet<GlobalPermissionEnum>());
                    final String[] globalPermissions = fields[1].split(GLOBAL_PERMISSION_SEPARATOR);
                    for (final String global : globalPermissions) {
                        if (global != null) {
                            try {
                                profile.getGlobalPermissions().add(GlobalPermissionEnum.valueOf(global));
                            } catch (IllegalArgumentException e) {
                                // The enum with this name does'nt exists.
                                continue;
                            }
                        }
                    }

                    // Privacy groups.
                    profile.setPrivacyGroups(new HashMap<PrivacyGroupDTO, PrivacyGroupPermissionEnum>());
                    final String[] privacyGroups = fields[2].split(PRIVACY_GROUP_SEPARATOR);
                    for (final String group : privacyGroups) {
                        if (group != null) {
                            final String[] groupProperties = group.split(PRIVACY_GROUP_FIELD_SEPARATOR);

                            if (groupProperties.length >= 4) {
                                try {
                                    final PrivacyGroupDTO newGroup = new PrivacyGroupDTO();
                                    newGroup.setId(Integer.valueOf(groupProperties[0]));
                                    newGroup.setCode(Integer.valueOf(groupProperties[1]));
                                    newGroup.setTitle(groupProperties[2]);
                                    final PrivacyGroupPermissionEnum permission = PrivacyGroupPermissionEnum
                                            .valueOf(groupProperties[3]);
                                    profile.getPrivacyGroups().put(newGroup, permission);
                                } catch (NumberFormatException e) {
                                    // The id or code isn't a number.
                                    continue;
                                } catch (IllegalArgumentException e) {
                                    // The enum with this name does'nt exists.
                                    continue;
                                } catch (NullPointerException e) {
                                    // The enum name is null.
                                    continue;
                                }
                            }
                        }
                    }
                }
            }
        }

        return profile;
    }

    /**
     * Returns if the authentication is granted for the given permission.
     * 
     * @param authentication
     *            The authentication.
     * @param permission
     *            The permission.
     * @return If the authentication is granted for this permission.
     */
    public static boolean isGranted(Authentication authentication, GlobalPermissionEnum permission) {
        return isGranted(authentication, new GlobalPermissionEnum[] { permission });
    }

    /**
     * Returns if the authentication is granted for all the given permissions.
     * 
     * @param authentication
     *            The authentication.
     * @param permissions
     *            The list of permissions.
     * @return If the authentication is granted for this list of permissions.
     */
    public static boolean isGranted(Authentication authentication, GlobalPermissionEnum... permissions) {

        if (authentication == null) {
            return false;
        }

        return isGranted(authentication.getAggregatedProfile(), permissions);
    }

    /**
     * Returns if the given profile is granted for the given permission.
     * 
     * @param profile
     *            The profile.
     * @param permission
     *            The permission.
     * @return If the profile is granted for this permission.
     */
    public static boolean isGranted(ProfileDTO profile, GlobalPermissionEnum permission) {
        return isGranted(profile, new GlobalPermissionEnum[] { permission });
    }

    /**
     * Returns if the given profile is granted for all the given permissions.
     * 
     * @param profile
     *            The profile.
     * @param permissions
     *            The list of permissions.
     * @return If the profile is granted for this list of permissions.
     */
    public static boolean isGranted(ProfileDTO profile, GlobalPermissionEnum... permissions) {

        boolean granted = false;

        // The profile must not be null.
        if (profile != null) {

            // No permission needed.
            if (permissions == null || permissions.length == 0) {
                granted = true;
            }
            // Checks if the permissions is contained in the profile.
            else {
                if (profile.getGlobalPermissions() != null) {
                    granted = true;
                    for (final GlobalPermissionEnum p : permissions) {
                        if (!profile.getGlobalPermissions().contains(p)) {
                            granted = false;
                            break;
                        }
                    }
                }
            }
        }

        return granted;
    }

    /**
     * Returns the permission {@link PrivacyGroupPermissionEnum} for the given
     * authentication and the given privacy group.
     * 
     * @param authentication
     *            The authentication.
     * @param group
     *            The privacy group.
     * @return The permission for the authentication and this privacy group.
     */
    public static PrivacyGroupPermissionEnum getPermission(Authentication authentication, PrivacyGroupDTO group) {

        if (authentication == null) {
            return PrivacyGroupPermissionEnum.NONE;
        }

        return getPermission(authentication.getAggregatedProfile(), group);
    }

    /**
     * Returns the permission {@link PrivacyGroupPermissionEnum} for the given
     * profile and the given privacy group.
     * 
     * @param profile
     *            The profile.
     * @param group
     *            The privacy group.
     * @return The permission for the profile and this privacy group.
     */
    public static PrivacyGroupPermissionEnum getPermission(ProfileDTO profile, PrivacyGroupDTO group) {

        PrivacyGroupPermissionEnum permission = PrivacyGroupPermissionEnum.NONE;

        // The profile must not be null.
        if (profile != null) {

            // No permission needed.
            if (group == null) {
                permission = PrivacyGroupPermissionEnum.WRITE;
            }
            // Checks if the privacy group is contained in the profile.
            else {
                if (profile.getPrivacyGroups() != null) {
                    final PrivacyGroupPermissionEnum p = profile.getPrivacyGroups().get(group);
                    if (p != null) {
                        permission = p;
                    }
                }
            }
        }

        return permission;
    }
}
